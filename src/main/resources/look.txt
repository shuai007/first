1、SSM：
    整合：只需要mybatis和spring，springMVC和spring不需要处理
整合步骤：
    jar包 spring和mybatis的jar包，一些依赖包，json的包
    静态资源：css、js、jsp、fusioncharts、ztree
    web.xml中的配置
        springMVC前端控制器
        spring的上下文
        spring的监听器
        乱码处理

springMVC
    <!--DispatcherServlet, 前端控制器.-->
    <servlet>
        <servlet-name>springMvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>springMvc</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

    乱码处理
     <filter>
            <filter-name>characterEncodingFilter</filter-name>
            <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
            <init-param>
                <param-name>encoding</param-name>
                <param-value>UTF-8</param-value>
            </init-param>
            <init-param>
                <param-name>forceEncoding</param-name>
                <param-value>true</param-value>
            </init-param>
        </filter>

            <context-param>
                <param-name>contextConfigLocation</param-name>
                <param-value>classpath:applicationContext.xml</param-value>
            </context-param>
            <listener>
                <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
            </listener>
配置文件：
    springMVC：
    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:context="http://www.springframework.org/schema/context"
           xmlns:mvc="http://www.springframework.org/schema/mvc"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd">

        <!--注解驱动-->
        <mvc:annotation-driven></mvc:annotation-driven>
        <!--2.处理器 handler，扫描范围-->
        <context:component-scan base-package="com.lening.controller"></context:component-scan>

        <!--jsp的视图解析器.   InternalResourceViewResolver-->
        <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
            <property name="prefix" value="/WEB-INF/view/"></property>
            <property name="suffix"  value=".jsp"></property>
        </bean>
    </beans>

    spring的配置文件
    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
    	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    	xmlns:context="http://www.springframework.org/schema/context"
    	xmlns:tx="http://www.springframework.org/schema/tx"
    	xmlns:aop="http://www.springframework.org/schema/aop"
    	xmlns:mvc="http://www.springframework.org/schema/mvc"
    	xmlns:p="http://www.springframework.org/schema/p"
    	xmlns:util="http://www.springframework.org/schema/util"
    	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
    		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
    		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
    		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

    	<!--开启spring自动扫描，扫描com.hy下所有的包  -->
    	<context:component-scan base-package="com.lening"/>
    	 <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
    		<property name="url" value="jdbc:mysql://127.0.0.1:3306/20190806?useUnicode=true&amp;characterEncoding=utf8"></property>
    		<property name="username" value="root"></property>
    		<property name="password" value="root"></property>
    	</bean>

    	<!--mybatis交给spring管理-->
    	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    		<property name="dataSource" ref="dataSource"></property>
    		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
    		<!--<property name="mapperLocations" value="classpath:com/lening/mapper/*.xml"></property>-->
    	</bean>

    	<!--spring代理mapper接口-->
    	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    		<property name="basePackage" value="com.lening.mapper"></property>
    	</bean>

    	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    		<property name="dataSource" ref="dataSource"/>
    	</bean>
    	<!--配置事务的通知///声明式事务  -->
    	<tx:advice id="txAdvice" transaction-manager="transactionManager">
    		<tx:attributes>
    			<!-- rollback-for属性就是当发生异常后，事务回滚后的操作，默认抛异常
    				timeout：事务的超时时间：默认-1，永远不超时，可以设置，一般情况下，一个事务瞬时就可以执行完成
    				但是不排除，有的很长时间，这样的就长时间占用资源，尤其是数据库资源，事务在开启的时候，有可能锁定数据库中的数据
    				单位是:秒
    			 -->
    			<tx:method name="save*" propagation="REQUIRED"  isolation="DEFAULT" rollback-for="java.lang.Exception"/>
    			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
    			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
    			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
    			<tx:method name="*" read-only="true"/>
    		</tx:attributes>
    	</tx:advice>
    	<!-- 配置aop切面，管理事务的切入点 -->
    	<aop:config>
    		<aop:advisor advice-ref="txAdvice"  pointcut="execution(* com.lening.service.*.*(..))"/>
    	</aop:config>
    </beans>
mybatis配置文件：
  <?xml version="1.0" encoding="UTF-8" ?>
  <!DOCTYPE configuration
          PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
          "http://mybatis.org/dtd/mybatis-3-config.dtd">
  <configuration>
      <typeAliases>
          <!--配置别名：目的就是在mybatis的mapper.xml中直接类名，要不然我们得写全路径
              返回值和接收参数直接写：UserBean
              不配置的话就得写全路径：com.lening.entity.UserBean
          -->
          <package name="com.lening.entity"/>
      </typeAliases>
      <mappers>
          <!--把mapper包下面所有的全部引入进来了
              引入方式的有三种,这个最简单
          -->
          <package name="com.lening.mapper"/>
      </mappers>
  </configuration>


  springMVC中的日期：
    1、在entity的日期类型的属性上加注解
        @DateTimeFormat(pattern = "yyyy-MM-dd")
    2、在controller层添加日期转化的初始化方法
        @InitBinder
        public void initBinder(WebDataBinder binder) {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            dateFormat.setLenient(false);
            binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));
        }

    3、list中的实体类中含有日期类型属性的集合不能使用 jsonarray
            默认：birthday":{"date":7,"day":3,"hours":0,"minutes":0,"month":7,"seconds":0,
                                "time":1565107200000,"timezoneOffset":-480,"year":119}
            @JsonFormat(pattern="yyyy-MM-dd")

    4、json的jsonarray中日期的不过滤
                JsonConfig jc = new JsonConfig();
                jc.setExcludes(new String[]{"birthday"});
                String json = JSONArray.fromObject(list, jc).toString();

 关联关系：

    用户和部门    一对一（已配置）
    用户和角色    一对一（已配置）
    用户和权限    一对多(间接关系，不需要配置)

    //在关系中，双方关系，只要有一方维护，就OK啦，除非必须是双向关联的，两表都要配置
    //否则一遍配置，一遍放弃，少的一方放弃。
    部门和用户    一对多（已配置）
    部门和角色    一对多（已配置）（但是在部门列表上没有功能，没有做给部门分配角色功能，就得在角色选择部门）


    角色和用户   一对多（放弃）
    角色和部门   一对一（配置）
    角色和权限   一对多(配置，有中间表，中间表两个字段，违纪系统 把多对多配置成两个一对多

    )
        中间表： hibernate中中间表自动生成，不用在实体类中显示，mybatis的自己配置（不在实体类中出现也可以）
    权限和角色   一对多


    在部门中，配置关联关系，查看部门的用户， 只要去加载部门，部门里面就有一个员工的list，要是不配置，
    拿着部门的id直接去用户表中查询，查出来是一个用户的list。

    open页面后，关闭新页面，刷新 父页面
        function xzjs(id) {
          //location.href="<c:url value='/toUserRole.do?id='/>"+id;
            var aa = window.open("<c:url value='/toUserRole.do?id='/>"+id,"","height=400px,width=600px");
            var loop = setInterval(function () {
                if(aa.closed){
                    clearInterval(loop);
                    location.reload();
                }
            },1)
        }
    </script>

    springMVC中，要是方法的没有返回值，他会默认  把访问路径当成返回页面名称了？？？？？？
    @ResponseBody

    1、不登录不让访问
    2、登录后只能查看自己的权限
        登录后，把自己的权限的url全部拿到，存起来，目前存在session中，  session中存了ub、用户的权限的url，要做按钮的话，存按钮
                                系统用户特别的多，sesion有可能存爆。(缓存，缓存可以写到硬盘上，session在内存中，)
                                ehcache，小缓存。缓存数据库（redis，专门讲）
    代码改变的地方：在powerbean中加入新的字段(判断是否是按钮),数据库加入
            把左侧菜单树中的按钮过滤掉
